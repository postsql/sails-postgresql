/*
helpers for testing in interactive python sesion

class PlPyEmulator:
    def quote_ident(this,s):
        return '"%s"' % s.replace('"', '""')
    def quote_literal(this,s):
        return "'%s'" % s.replace("'", "''")

plpy = PlPyEmulator()

*/

CREATE FUNCTION load_query_builders() RETURNS void
    LANGUAGE plpythonu
    AS $$

opmap = {
    'like': 'like',
    'lessThan': '<',
    'lessThanOrEqual': '<=',
    'greaterThan': '>',
    'greaterThanOrEqual': '>=',
    
}

GD['opmap'] = opmap

def build_where_clause(options):
    if not options.has_key('where'):
        return []
    query = ['WHERE']
    where = options['where']
    if not where: # null or empty 'where'
        return []
    where_list = []
    for key in where:
        value = where[key]
        print (key, value, type(value))
        if value is None:
            where_list.append("%s IS NULL" % plpy.quote_ident(key))
        elif (type(value) in (str, unicode)):
            where_list.append("%s = %s" % (plpy.quote_ident(key),plpy.quote_literal(value)))
        elif (type(value) == dict):
            for opkey in value:
                op = opmap.get(opkey)
                opvalue = value[opkey]
                if type(opvalue) == list:
                    # maybe should plpy.quote_literal(str()) if any are strings to match JS behaviour
                    in_list = [(plpy.quote_literal(item) if (type(item) in (str, unicode)) else item) for item in value]
                    where_list.append("%s %s ANY (%s)" % (plpy.quote_ident(key),  op, ','.join(in_list)))
                else:
                    if type(opvalue) in (str, unicode):
                        opvalue = plpy.quote_literal(opvalue)
                    where_list.append("%s %s %s" % (plpy.quote_ident(key), op, opvalue))
        elif (type(value) == list):
            # maybe should plpy.quote_literal(str()) if any are strings to match JS behaviour
            in_list = [(plpy.quote_literal(item) if (type(item) in (str, unicode)) else item) for item in value]
            where_list.append("%s IN (%s)" % (plpy.quote_ident(key), ','.join(in_list)))
        else:
            where_list.append("%s = %s" % (plpy.quote_ident(key), value))
    query.append(' AND '.join(where_list))
    return query

import json

def build_destroy_query(table, options_in):
    options = json.loads(options_in)
    query = ['DELETE FROM %s' % plpy.quote_ident(table)];
    query  += build_where_clause(options)
    # TODO: return actual PK column(s)
    query.append("RETURNING id")
    return ' '.join(query)

GD['build_destroy_query'] = build_destroy_query

GD['query_builders_loaded'] = True

$$;

